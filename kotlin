package com.example.myapplication2

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.TableLayout
import android.widget.TableRow
import android.widget.TextView
import android.widget.Toast
import androidx.activity.OnBackPressedCallback
import androidx.core.content.ContextCompat
import androidx.core.view.GravityCompat
import androidx.lifecycle.lifecycleScope
import com.example.myapplication2.databinding.ActivityDashboardBinding
import com.google.gson.Gson
import com.google.gson.JsonSyntaxException
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import java.util.Locale

class DashboardActivity : BaseActivity() {

    private lateinit var binding: ActivityDashboardBinding
    private val tag = "DashboardActivity"
    private val gson = Gson()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityDashboardBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Set dashboard title using string resource
        binding.dashboardTitle.setText(R.string.dashboard_title)
        binding.dashboardTitle.visibility = View.VISIBLE

        // Setup menu button to open drawer
        binding.menuButton.setOnClickListener {
            binding.drawerLayout.openDrawer(GravityCompat.END)
        }

        // Setup navigation drawer items
        setupNavigationDrawer()

        // Initialize and start real-time updates for circular views and table
        setupCircularViews()
        startRealTimeUpdates()

        // Handle filter button click
        val filterTextView = binding.circularViews.findViewWithTag<TextView>("filter")
        filterTextView?.setOnClickListener {
            showFilterDialog()
        }

        // Setup back press handling using OnBackPressedCallback (API 33+)
        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() {
                if (binding.drawerLayout.isDrawerOpen(GravityCompat.END)) {
                    binding.drawerLayout.closeDrawer(GravityCompat.END)
                } else {
                    showExitConfirmationDialog()
                }
            }
        })
    }

    private fun setupNavigationDrawer() {
        binding.drawer.findViewById<TextView>(R.id.dashboard)?.setOnClickListener {
            binding.drawerLayout.closeDrawer(GravityCompat.END)
        }

        binding.drawer.findViewById<TextView>(R.id.block)?.setOnClickListener {
            Toast.makeText(this, getString(R.string.toast_block_clicked), Toast.LENGTH_SHORT).show()
            binding.drawerLayout.closeDrawer(GravityCompat.END)
        }

        binding.drawer.findViewById<TextView>(R.id.newVisitor)?.setOnClickListener {
            startActivity(Intent(this, NewVisitorActivity::class.java))
            binding.drawerLayout.closeDrawer(GravityCompat.END)
        }

        binding.drawer.findViewById<TextView>(R.id.manageVisitor)?.setOnClickListener {
            Toast.makeText(this, getString(R.string.toast_manage_visitor_clicked), Toast.LENGTH_SHORT).show()
            binding.drawerLayout.closeDrawer(GravityCompat.END)
        }

        binding.drawer.findViewById<TextView>(R.id.visitorDetail)?.setOnClickListener {
            Toast.makeText(this, getString(R.string.toast_visitor_detail_clicked), Toast.LENGTH_SHORT).show()
            binding.drawerLayout.closeDrawer(GravityCompat.END)
        }

        binding.drawer.findViewById<TextView>(R.id.security)?.setOnClickListener {
            Toast.makeText(this, getString(R.string.toast_security_clicked), Toast.LENGTH_SHORT).show()
            binding.drawerLayout.closeDrawer(GravityCompat.END)
        }
    }

    private fun setupCircularViews() {
        binding.totalText.tag = "total"
        binding.checkInText.tag = "checkIn"
        binding.checkOutText.tag = "checkOut"
        binding.filterText.tag = "filter"

        updateCircularViewsAndTable()
    }

    private fun startRealTimeUpdates() {
        lifecycleScope.launch {
            while (true) {
                updateCircularViewsAndTable()
                delay(5000) // Update every 5 seconds
            }
        }
    }

    private fun updateCircularViewsAndTable() {
        val visitorList = getVisitorListFromPrefs()
        val totalVisitors = visitorList.size
        val checkInVisitors = visitorList.count { it.photoUri != null }
        val checkOutVisitors = visitorList.count { it.photoUri == null }

        // Update circular views using string resources and proper formatting
        binding.totalValue.text = String.format(Locale.getDefault(), "%d", totalVisitors)
        binding.checkInValue.text = String.format(Locale.getDefault(), "%d", checkInVisitors)
        binding.checkOutValue.text = String.format(Locale.getDefault(), "%d", checkOutVisitors)
        binding.filterText.setText(R.string.filter_options)

        // Update table with all visitors
        updateVisitorTable(visitorList)
    }

    private fun updateVisitorTable(visitors: List<Visitor>) {
        val tableLayout = binding.visitorDataTable
        // Remove all rows except the header (index 0)
        while (tableLayout.childCount > 1) {
            tableLayout.removeViewAt(1)
        }

        // Add rows for each visitor
        for (visitor in visitors) {
            val tableRow = TableRow(this).apply {
                layoutParams = TableLayout.LayoutParams(
                    TableLayout.LayoutParams.MATCH_PARENT,
                    TableLayout.LayoutParams.WRAP_CONTENT
                ).apply {
                    setMargins(0, 8, 0, 8)
                }
            }

            val nameTextView = TextView(this).apply {
                layoutParams = TableRow.LayoutParams(
                    0,
                    TableRow.LayoutParams.WRAP_CONTENT,
                    1f
                )
                text = visitor.name
                textSize = 14f
                setTextColor(ContextCompat.getColor(context, android.R.color.darker_gray))
                setPadding(8, 8, 8, 8)
                gravity = android.view.Gravity.CENTER
            }

            val phoneTextView = TextView(this).apply {
                layoutParams = TableRow.LayoutParams(
                    0,
                    TableRow.LayoutParams.WRAP_CONTENT,
                    1f
                )
                text = visitor.mobile
                textSize = 14f
                setTextColor(ContextCompat.getColor(context, android.R.color.darker_gray))
                setPadding(8, 8, 8, 8)
                gravity = android.view.Gravity.CENTER
            }

            val purposeTextView = TextView(this).apply {
                layoutParams = TableRow.LayoutParams(
                    0,
                    TableRow.LayoutParams.WRAP_CONTENT,
                    1f
                )
                text = visitor.purpose
                textSize = 14f
                setTextColor(ContextCompat.getColor(context, android.R.color.darker_gray))
                setPadding(8, 8, 8, 8)
                gravity = android.view.Gravity.CENTER
            }

            val destinationTextView = TextView(this).apply {
                layoutParams = TableRow.LayoutParams(
                    0,
                    TableRow.LayoutParams.WRAP_CONTENT,
                    1f
                )
                text = visitor.destination
                textSize = 14f
                setTextColor(ContextCompat.getColor(context, android.R.color.darker_gray))
                setPadding(8, 8, 8, 8)
                gravity = android.view.Gravity.CENTER
            }

            tableRow.addView(nameTextView)
            tableRow.addView(phoneTextView)
            tableRow.addView(purposeTextView)
            tableRow.addView(destinationTextView)

            tableLayout.addView(tableRow)
        }
    }

    private fun showFilterDialog() {
        val options = arrayOf(
            getString(R.string.filter_day),
            getString(R.string.filter_week),
            getString(R.string.filter_month)
        )
        android.app.AlertDialog.Builder(this)
            .setTitle(R.string.select_filter_title)
            .setItems(options) { _, which ->
                val filteredVisitors = when (options[which]) {
                    getString(R.string.filter_day) -> filterVisitorsByDay()
                    getString(R.string.filter_week) -> filterVisitorsByWeek()
                    getString(R.string.filter_month) -> filterVisitorsByMonth()
                    else -> getVisitorListFromPrefs()
                }
                updateVisitorCountsAndTable(filteredVisitors)
                Toast.makeText(this, getString(R.string.toast_filtered_by, options[which]), Toast.LENGTH_SHORT).show()
            }
            .setNegativeButton(R.string.cancel) { dialog, _ -> dialog.dismiss() }
            .show()
    }

    private fun filterVisitorsByDay(): List<Visitor> {
        val visitorList = getVisitorListFromPrefs()
        // TODO: Add actual date-based filtering (requires timestamp in Visitor class)
        return visitorList
    }

    private fun filterVisitorsByWeek(): List<Visitor> {
        val visitorList = getVisitorListFromPrefs()
        // TODO: Add actual date-based filtering (requires timestamp in Visitor class)
        return visitorList
    }

    private fun filterVisitorsByMonth(): List<Visitor> {
        val visitorList = getVisitorListFromPrefs()
        // TODO: Add actual date-based filtering (requires timestamp in Visitor class)
        return visitorList
    }

    private fun updateVisitorCountsAndTable(visitors: List<Visitor>) {
        val totalVisitors = visitors.size
        val checkInVisitors = visitors.count { it.photoUri != null }
        val checkOutVisitors = visitors.count { it.photoUri == null }

        binding.totalValue.text = String.format(Locale.getDefault(), "%d", totalVisitors)
        binding.checkInValue.text = String.format(Locale.getDefault(), "%d", checkInVisitors)
        binding.checkOutValue.text = String.format(Locale.getDefault(), "%d", checkOutVisitors)

        updateVisitorTable(visitors)
    }

    private fun getVisitorListFromPrefs(): List<Visitor> {
        val prefs = getSharedPreferences("VisitorPrefs", MODE_PRIVATE)
        val json = prefs.getString("visitor_list", null)
        return try {
            if (json.isNullOrEmpty()) {
                Log.d(tag, getString(R.string.log_no_visitors))
                emptyList()
            } else {
                Log.d(tag, getString(R.string.log_deserializing_visitors, json))
                gson.fromJson(json, object : TypeToken<List<Visitor>>() {}.type)
            }
        } catch (e: JsonSyntaxException) {
            Log.e(tag, getString(R.string.log_failed_deserialize, e.message), e)
            Toast.makeText(this, R.string.toast_error_loading_data, Toast.LENGTH_SHORT).show()
            emptyList()
        } catch (e: Exception) {
            Log.e(tag, getString(R.string.log_unexpected_error, e.message), e)
            Toast.makeText(this, R.string.toast_error_loading_data, Toast.LENGTH_SHORT).show()
            emptyList()
        }
    }

    data class Visitor(
        val name: String,
        val mobile: String,
        val purpose: String,
        val destination: String,
        val photoUri: String? = null
    )

    private fun showExitConfirmationDialog() {
        android.app.AlertDialog.Builder(this)
            .setTitle(R.string.exit_confirmation_title)
            .setMessage(R.string.exit_confirmation_message)
            .setPositiveButton(R.string.yes) { _, _ ->
                finish()
            }
            .setNegativeButton(R.string.no) { dialog, _ ->
                dialog.dismiss()
            }
            .setCancelable(false)
            .show()
    }
}
